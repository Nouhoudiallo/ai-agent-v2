// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sender {
  USER
  AGENT
}

enum ROLE {
  USER
  ADMIN
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  role        ROLE         @default(USER)
  discussions Discussion[]
  apiKeys     ApiKey[]
  documents   Document[]   // Ajout de la relation avec Document
}

model Discussion {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id           String     @id @default(cuid())
  content      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  discussionId String
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  sender       Sender
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Note: La restriction pour le rôle ADMIN doit être gérée au niveau de l'application.
}

model Document {
  id          String           @id @default(cuid())
  filename    String
  mimetype    String
  size        Int
  uploadedAt  DateTime         @default(now())
  uploaderId  String
  uploader    User             @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  chunks      DocumentChunk[]
}

model DocumentChunk {
  id          String     @id @default(cuid())
  content     String
  metadata    Json
  documentId  String
  document    Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)
  index       Int        // Position du chunk dans le document
}
